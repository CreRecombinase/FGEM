// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/fgem.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// fgem_grad_stan
Eigen::ArrayXd fgem_grad_stan(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::ArrayXd> BF, const double prec, const bool neg, const bool log_BF);
RcppExport SEXP _fgem_fgem_grad_stan(SEXP parSEXP, SEXP XSEXP, SEXP BFSEXP, SEXP precSEXP, SEXP negSEXP, SEXP log_BFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< const double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< const bool >::type neg(negSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_BF(log_BFSEXP);
    rcpp_result_gen = Rcpp::wrap(fgem_grad_stan(par, X, BF, prec, neg, log_BF));
    return rcpp_result_gen;
END_RCPP
}
// sp_fgem_grad_stan
Eigen::ArrayXd sp_fgem_grad_stan(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::SparseMatrix<double>> X, const Eigen::Map<Eigen::ArrayXd> BF, const double prec, const bool neg, const bool log_BF);
RcppExport SEXP _fgem_sp_fgem_grad_stan(SEXP parSEXP, SEXP XSEXP, SEXP BFSEXP, SEXP precSEXP, SEXP negSEXP, SEXP log_BFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< const double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< const bool >::type neg(negSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_BF(log_BFSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_fgem_grad_stan(par, X, BF, prec, neg, log_BF));
    return rcpp_result_gen;
END_RCPP
}
// sp_fgem_lik_stan
double sp_fgem_lik_stan(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::SparseMatrix<double>> X, const Eigen::Map<Eigen::ArrayXd> BF, const double prec, const bool neg, const bool log_BF);
RcppExport SEXP _fgem_sp_fgem_lik_stan(SEXP parSEXP, SEXP XSEXP, SEXP BFSEXP, SEXP precSEXP, SEXP negSEXP, SEXP log_BFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< const double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< const bool >::type neg(negSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_BF(log_BFSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_fgem_lik_stan(par, X, BF, prec, neg, log_BF));
    return rcpp_result_gen;
END_RCPP
}
// fgem_lik_stan
double fgem_lik_stan(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::ArrayXd> BF, const double prec, const bool neg, const bool log_BF);
RcppExport SEXP _fgem_fgem_lik_stan(SEXP parSEXP, SEXP XSEXP, SEXP BFSEXP, SEXP precSEXP, SEXP negSEXP, SEXP log_BFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< const double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< const bool >::type neg(negSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_BF(log_BFSEXP);
    rcpp_result_gen = Rcpp::wrap(fgem_lik_stan(par, X, BF, prec, neg, log_BF));
    return rcpp_result_gen;
END_RCPP
}
// fgem_hess_stan
Eigen::MatrixXd fgem_hess_stan(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::ArrayXd> BF, const double prec);
RcppExport SEXP _fgem_fgem_hess_stan(SEXP parSEXP, SEXP XSEXP, SEXP BFSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< const double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(fgem_hess_stan(par, X, BF, prec));
    return rcpp_result_gen;
END_RCPP
}
// fgem_fit_bfgs
Rcpp::List fgem_fit_bfgs(const Eigen::ArrayXd par, SEXP X, const Eigen::Map<Eigen::ArrayXd> BF, const double prec, const double epsilon, const int max_iter);
RcppExport SEXP _fgem_fgem_fit_bfgs(SEXP parSEXP, SEXP XSEXP, SEXP BFSEXP, SEXP precSEXP, SEXP epsilonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type par(parSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< const double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(fgem_fit_bfgs(par, X, BF, prec, epsilon, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// marginal_fgem_fit_bfgs
Rcpp::List marginal_fgem_fit_bfgs(Rcpp::NumericMatrix X, const Eigen::Map<Eigen::ArrayXd> BF, double prec, const double epsilon, const int max_iter, const bool progress, const bool log_BF);
RcppExport SEXP _fgem_marginal_fgem_fit_bfgs(SEXP XSEXP, SEXP BFSEXP, SEXP precSEXP, SEXP epsilonSEXP, SEXP max_iterSEXP, SEXP progressSEXP, SEXP log_BFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type BF(BFSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_BF(log_BFSEXP);
    rcpp_result_gen = Rcpp::wrap(marginal_fgem_fit_bfgs(X, BF, prec, epsilon, max_iter, progress, log_BF));
    return rcpp_result_gen;
END_RCPP
}
// make_env_obj
Rcpp::List make_env_obj(bool sparse, const bool log);
RcppExport SEXP _fgem_make_env_obj(SEXP sparseSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< const bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(make_env_obj(sparse, log));
    return rcpp_result_gen;
END_RCPP
}
// log_1p_exp
Rcpp::NumericVector log_1p_exp(SEXP x);
RcppExport SEXP _fgem_log_1p_exp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_1p_exp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fgem_fgem_grad_stan", (DL_FUNC) &_fgem_fgem_grad_stan, 6},
    {"_fgem_sp_fgem_grad_stan", (DL_FUNC) &_fgem_sp_fgem_grad_stan, 6},
    {"_fgem_sp_fgem_lik_stan", (DL_FUNC) &_fgem_sp_fgem_lik_stan, 6},
    {"_fgem_fgem_lik_stan", (DL_FUNC) &_fgem_fgem_lik_stan, 6},
    {"_fgem_fgem_hess_stan", (DL_FUNC) &_fgem_fgem_hess_stan, 4},
    {"_fgem_fgem_fit_bfgs", (DL_FUNC) &_fgem_fgem_fit_bfgs, 6},
    {"_fgem_marginal_fgem_fit_bfgs", (DL_FUNC) &_fgem_marginal_fgem_fit_bfgs, 7},
    {"_fgem_make_env_obj", (DL_FUNC) &_fgem_make_env_obj, 2},
    {"_fgem_log_1p_exp", (DL_FUNC) &_fgem_log_1p_exp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fgem(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
